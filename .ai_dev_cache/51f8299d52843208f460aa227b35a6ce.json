{"model": "qwen2.5-coder:14b", "prompt_hash": "1c046a2f10a5135eeeb584ea83ab069d", "response": "Certainly! Below is an example script that demonstrates how to use the \"Create a simple calculator in Python with Tkinter\" project. This example will include files named `main.py`, `utils.py`, `calculator.py`, and `ui.py`. Each file will have clear documentation, comments, best practices, and necessary data loading or setup.\n\n### Directory Structure\n```\ncalculator_project/\n│\n├── main.py\n├── utils.py\n├── calculator.py\n└── ui.py\n```\n\n### `utils.py`\nThis file contains utility functions that might be used across different modules.\n\n```python\n# utils.py\n\ndef add(a, b):\n    \"\"\"Return the sum of a and b.\"\"\"\n    return a + b\n\ndef subtract(a, b):\n    \"\"\"Return the difference between a and b.\"\"\"\n    return a - b\n\ndef multiply(a, b):\n    \"\"\"Return the product of a and b.\"\"\"\n    return a * b\n\ndef divide(a, b):\n    \"\"\"Return the quotient of a divided by b. Raises ValueError if b is zero.\"\"\"\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    return a / b\n```\n\n### `calculator.py`\nThis file contains the core logic for performing calculations.\n\n```python\n# calculator.py\n\nfrom utils import add, subtract, multiply, divide\n\nclass Calculator:\n    \"\"\"A simple calculator class that performs basic arithmetic operations.\"\"\"\n\n    def __init__(self):\n        pass\n\n    def compute(self, operation, a, b):\n        \"\"\"\n        Perform the specified arithmetic operation on two numbers.\n\n        Parameters:\n            operation (str): The operation to perform ('add', 'subtract', 'multiply', 'divide').\n            a (float): The first operand.\n            b (float): The second operand.\n\n        Returns:\n            float: The result of the operation.\n\n        Raises:\n            ValueError: If an invalid operation is specified or if division by zero occurs.\n        \"\"\"\n        operations = {\n            'add': add,\n            'subtract': subtract,\n            'multiply': multiply,\n            'divide': divide\n        }\n\n        try:\n            return operations[operation](a, b)\n        except KeyError:\n            raise ValueError(f\"Invalid operation: {operation}\")\n```\n\n### `ui.py`\nThis file contains the Tkinter UI code to interact with the calculator.\n\n```python\n# ui.py\n\nimport tkinter as tk\nfrom calculator import Calculator\n\nclass CalculatorApp:\n    \"\"\"A simple calculator application using Tkinter.\"\"\"\n\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Simple Calculator\")\n\n        self.calculator = Calculator()\n\n        # Entry widget for displaying results\n        self.result_var = tk.StringVar()\n        self.result_entry = tk.Entry(root, textvariable=self.result_var, justify='right', state='readonly')\n        self.result_entry.grid(row=0, column=0, columnspan=4, padx=10, pady=10)\n\n        # Buttons for digits and operations\n        buttons = [\n            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2),\n            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2),\n            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2),\n            ('0', 4, 1)\n        ]\n\n        for (text, row, col) in buttons:\n            button = tk.Button(root, text=text, width=5, height=2,\n                              command=lambda t=text: self.append_to_entry(t))\n            button.grid(row=row, column=col, padx=5, pady=5)\n\n        # Operation buttons\n        operations = ['add', 'subtract', 'multiply', 'divide']\n        for i, operation in enumerate(operations):\n            button = tk.Button(root, text=operation[0].upper(), width=5, height=2,\n                              command=lambda op=operation: self.set_operation(op))\n            button.grid(row=i+1, column=3, padx=5, pady=5)\n\n        # Clear and equal buttons\n        clear_button = tk.Button(root, text='C', width=5, height=2,\n                                command=self.clear_entry)\n        clear_button.grid(row=4, column=0, padx=5, pady=5)\n\n        equal_button = tk.Button(root, text='=', width=12, height=2,\n                                 command=self.calculate_result)\n        equal_button.grid(row=4, columnspan=3, padx=5, pady=5)\n\n    def append_to_entry(self, value):\n        \"\"\"Append a digit or decimal point to the entry widget.\"\"\"\n        current = self.result_var.get()\n        if value == '.' and '.' not in current:\n            self.result_var.set(current + '.')\n        else:\n            self.result_var.set(current + value)\n\n    def set_operation(self, operation):\n        \"\"\"Set the operation to be performed.\"\"\"\n        try:\n            current = float(self.result_var.get())\n            self.first_operand = current\n            self.operation = operation\n            self.result_var.set('')\n        except ValueError:\n            self.result_var.set('Error')\n\n    def clear_entry(self):\n        \"\"\"Clear the entry widget.\"\"\"\n        self.result_var.set('')\n\n    def calculate_result(self):\n        \"\"\"Calculate the result based on the operation and operands.\"\"\"\n        try:\n            second_operand = float(self.result_var.get())\n            if self.operation == 'add':\n                result = self.calculator.compute('add', self.first_operand, second_operand)\n            elif self.operation == 'subtract':\n                result = self.calculator.compute('subtract', self.first_operand, second_operand)\n            elif self.operation == 'multiply':\n                result = self.calculator.compute('multiply', self.first_operand, second_operand)\n            elif self.operation == 'divide':\n                result = self.calculator.compute('divide', self.first_operand, second_operand)\n            self.result_var.set(result)\n        except ValueError as e:\n            self.result_var.set(str(e))\n```\n\n### `main.py`\nThis file initializes the Tkinter application.\n\n```python\n# main.py\n\nimport tkinter as tk\n\ndef main():\n    root = tk.Tk()\n    app = CalculatorApp(root)\n    root.mainloop()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Running the Application\n1. Save all the files in a directory named `calculator_project`.\n2. Open a terminal or command prompt.\n3. Navigate to the `calculator_project` directory.\n4. Run the application using the command: `python main.py`.\n\nThis will launch the Tkinter calculator application, allowing you to perform basic arithmetic operations.", "timestamp": 1741794015.3980758}